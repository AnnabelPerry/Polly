// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PollySI
Rcpp::CharacterMatrix PollySI(std::string freq_name, std::vector<std::string> desired_scaffolds, double threshold);
RcppExport SEXP _Polly_PollySI(SEXP freq_nameSEXP, SEXP desired_scaffoldsSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type freq_name(freq_nameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desired_scaffolds(desired_scaffoldsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(PollySI(freq_name, desired_scaffolds, threshold));
    return rcpp_result_gen;
END_RCPP
}
// MicroGenotyper
void MicroGenotyper(std::vector<std::string> bam_vec, std::string lookup_file, std::vector<std::string> desired_scaffolds, std::vector<std::string> output_names);
RcppExport SEXP _Polly_MicroGenotyper(SEXP bam_vecSEXP, SEXP lookup_fileSEXP, SEXP desired_scaffoldsSEXP, SEXP output_namesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bam_vec(bam_vecSEXP);
    Rcpp::traits::input_parameter< std::string >::type lookup_file(lookup_fileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desired_scaffolds(desired_scaffoldsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type output_names(output_namesSEXP);
    MicroGenotyper(bam_vec, lookup_file, desired_scaffolds, output_names);
    return R_NilValue;
END_RCPP
}
// PollyMicros
void PollyMicros(std::vector<std::string> CSV_names, std::vector<std::string> desired_scaffolds, unsigned int threshold, std::string output_name);
RcppExport SEXP _Polly_PollyMicros(SEXP CSV_namesSEXP, SEXP desired_scaffoldsSEXP, SEXP thresholdSEXP, SEXP output_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type CSV_names(CSV_namesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desired_scaffolds(desired_scaffoldsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_name(output_nameSEXP);
    PollyMicros(CSV_names, desired_scaffolds, threshold, output_name);
    return R_NilValue;
END_RCPP
}
// Polly
void Polly(int region_size, std::vector<std::string> desired_scaffolds, std::string PollySIInputName, std::string PollyMicrosInputName, std::string FinalOutputName);
RcppExport SEXP _Polly_Polly(SEXP region_sizeSEXP, SEXP desired_scaffoldsSEXP, SEXP PollySIInputNameSEXP, SEXP PollyMicrosInputNameSEXP, SEXP FinalOutputNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type region_size(region_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desired_scaffolds(desired_scaffoldsSEXP);
    Rcpp::traits::input_parameter< std::string >::type PollySIInputName(PollySIInputNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type PollyMicrosInputName(PollyMicrosInputNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type FinalOutputName(FinalOutputNameSEXP);
    Polly(region_size, desired_scaffolds, PollySIInputName, PollyMicrosInputName, FinalOutputName);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Polly_PollySI", (DL_FUNC) &_Polly_PollySI, 3},
    {"_Polly_MicroGenotyper", (DL_FUNC) &_Polly_MicroGenotyper, 4},
    {"_Polly_PollyMicros", (DL_FUNC) &_Polly_PollyMicros, 4},
    {"_Polly_Polly", (DL_FUNC) &_Polly_Polly, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_Polly(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
